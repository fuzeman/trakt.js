{"version":3,"sources":["core/http.js"],"names":["HttpClient","client","baseUrl","_client","_baseUrl","path","options","request","method","headers","params","body","bodyType","authenticated","sessionKey","getSessionKey","key","Error","session","access_token","JSON","stringify","fetch","encodeParameters","then","response","json","parameters","Object","keys","forEach","encode"],"mappings":";;;;;;;;AAAA;;AAEA;;;;AACA;;;;;;;;IAEqBA,U;AACjB,wBAAYC,MAAZ,EAAoBC,OAApB,EAA6B;AAAA;;AACzB,aAAKC,OAAL,GAAeF,MAAf;AACA,aAAKG,QAAL,GAAgBF,WAAW,uBAA3B;AACH;;;;4BAMGG,I,EAAMC,O,EAAS;AACf,mBAAO,KAAKC,OAAL,CAAa,KAAb,EAAoBF,IAApB,EAA0BC,OAA1B,CAAP;AACH;;;6BAEID,I,EAAMC,O,EAAS;AAChB,mBAAO,KAAKC,OAAL,CAAa,MAAb,EAAqBF,IAArB,EAA2BC,OAA3B,CAAP;AACH;;;gCAEOE,M,EAAQH,I,EAAMC,O,EAAS;AAC3BA,sBAAU,qBAAM;AACZG,yBAAS,EADG;AAEZC,wBAAQ,EAFI;;AAIZC,sBAAM,IAJM;AAKZC,0BAAU,MALE;;AAOZC,+BAAe,KAPH;AAQZC,4BAAY,KAAKX,OAAL,CAAaY,aAAb;AARA,aAAN,EASPT,WAAW,EATJ,CAAV;;AAWA;AACAA,oBAAQG,OAAR,CAAgB,eAAhB,IAAmC,KAAKN,OAAL,CAAaa,GAAhD;AACAV,oBAAQG,OAAR,CAAgB,mBAAhB,IAAuC,CAAvC;;AAEA,gBAAGH,QAAQO,aAAX,EAA0B;AACtB;AACA,oBAAG,CAAC,wBAAUP,QAAQQ,UAAlB,CAAJ,EAAmC;AAC/B,0BAAM,IAAIG,KAAJ,CAAU,yCAAV,CAAN;AACH;;AAEDX,wBAAQG,OAAR,CAAgB,eAAhB,IAAmC,YAAY,KAAKN,OAAL,CAAae,OAAb,CAAqBC,YAApE;AACH;;AAED;AACA,gBAAG,wBAAUb,QAAQK,IAAlB,CAAH,EAA4B;AACxB;AACA,oBAAGL,QAAQM,QAAR,KAAqB,MAAxB,EAAgC;AAC5BN,4BAAQK,IAAR,GAAeS,KAAKC,SAAL,CAAef,QAAQK,IAAvB,CAAf;AACAL,4BAAQG,OAAR,CAAgB,cAAhB,IAAkC,kBAAlC;AACH,iBAHD,MAGO;AACH,0BAAM,IAAIQ,KAAJ,CAAU,mCAAmCX,QAAQM,QAA3C,GAAsD,GAAhE,CAAN;AACH;AACJ;;AAED;AACA,mBAAOU,MAAM,KAAKlB,QAAL,GAAgBC,IAAhB,GAAuB,GAAvB,GAA6B,KAAKkB,gBAAL,CAAsBjB,QAAQI,MAA9B,CAAnC,EAA0E;AAC7EF,wBAAQA,MADqE;AAE7EC,yBAASH,QAAQG,OAF4D;AAG7EE,sBAAML,QAAQK;AAH+D,aAA1E,EAIJa,IAJI,CAIC,UAASC,QAAT,EAAmB;AACvB;AACA,uBAAOA,SAASC,IAAT,EAAP;AACH,aAPM,CAAP;AAQH;;;yCAEgBC,U,EAAY;AACzB;AACAC,mBAAOC,IAAP,CAAYF,UAAZ,EAAwBG,OAAxB,CAAgC,UAACd,GAAD,EAAS;AACrC,oBAAG,OAAOW,WAAWX,GAAX,CAAP,KAA2B,WAA9B,EAA2C;AACvC,2BAAOW,WAAWX,GAAX,CAAP;AACH;AACJ,aAJD;;AAMA;AACA,mBAAO,sBAAYe,MAAZ,CAAmBJ,UAAnB,CAAP;AACH;;;4BArEa;AACV,mBAAO,KAAKvB,QAAZ;AACH;;;;;;kBARgBJ,U","file":"core/http.js","sourcesContent":["import {isDefined} from './helpers';\r\n\r\nimport merge from 'lodash-amd/merge';\r\nimport querystring from 'querystring';\r\n\r\nexport default class HttpClient {\r\n    constructor(client, baseUrl) {\r\n        this._client = client;\r\n        this._baseUrl = baseUrl || 'https://api.trakt.tv/';\r\n    }\r\n\r\n    get baseUrl() {\r\n        return this._baseUrl;\r\n    }\r\n\r\n    get(path, options) {\r\n        return this.request('GET', path, options);\r\n    }\r\n\r\n    post(path, options) {\r\n        return this.request('POST', path, options);\r\n    }\r\n\r\n    request(method, path, options) {\r\n        options = merge({\r\n            headers: {},\r\n            params: {},\r\n\r\n            body: null,\r\n            bodyType: 'json',\r\n\r\n            authenticated: false,\r\n            sessionKey: this._client.getSessionKey()\r\n        }, options || {});\r\n\r\n        // Set request headers\r\n        options.headers['trakt-api-key'] = this._client.key;\r\n        options.headers['trakt-api-version'] = 2;\r\n\r\n        if(options.authenticated) {\r\n            // Add session key\r\n            if(!isDefined(options.sessionKey)) {\r\n                throw new Error('Missing required \"sessionKey\" parameter');\r\n            }\r\n\r\n            options.headers['Authorization'] = 'Bearer ' + this._client.session.access_token;\r\n        }\r\n\r\n        // Process body\r\n        if(isDefined(options.body)) {\r\n            // Encode body as `bodyType`\r\n            if(options.bodyType === 'json') {\r\n                options.body = JSON.stringify(options.body);\r\n                options.headers['Content-Type'] = 'application/json';\r\n            } else {\r\n                throw new Error('Invalid \"bodyType\" provided: \"' + options.bodyType + '\"');\r\n            }\r\n        }\r\n\r\n        // Send request\r\n        return fetch(this._baseUrl + path + '?' + this.encodeParameters(options.params), {\r\n            method: method,\r\n            headers: options.headers,\r\n            body: options.body\r\n        }).then(function(response) {\r\n            // TODO check status code\r\n            return response.json();\r\n        });\r\n    }\r\n\r\n    encodeParameters(parameters) {\r\n        // Remove undefined parameters\r\n        Object.keys(parameters).forEach((key) => {\r\n            if(typeof parameters[key] === 'undefined') {\r\n                delete parameters[key];\r\n            }\r\n        });\r\n\r\n        // Encode parameters to string\r\n        return querystring.encode(parameters);\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}