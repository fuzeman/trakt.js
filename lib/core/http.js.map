{"version":3,"sources":["core/http.js"],"names":["HttpClient","client","baseUrl","_client","_baseUrl","path","options","request","method","headers","params","body","bodyType","authenticated","session","application","includeAppParameters","key","getSession","then","Promise","reject","Error","error","message","access_token","name","version","build","date","_buildUserAgent","JSON","stringify","debug","console","fetch","encodeParameters","response","json","parameters","Object","keys","forEach","encode","result","fragments","filter","fragment","length","join"],"mappings":"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","file":"core/http.js","sourcesContent":["import merge from 'lodash-amd/merge';\r\nimport querystring from 'querystring';\r\n\r\nimport {isDefined} from './helpers';\r\n\r\n\r\nexport default class HttpClient {\r\n    constructor(client, baseUrl) {\r\n        this._client = client;\r\n        this._baseUrl = baseUrl || 'https://api.trakt.tv/';\r\n    }\r\n\r\n    get baseUrl() {\r\n        return this._baseUrl;\r\n    }\r\n\r\n    get(path, options) {\r\n        return this.request('GET', path, options);\r\n    }\r\n\r\n    post(path, options) {\r\n        return this.request('POST', path, options);\r\n    }\r\n\r\n    request(method, path, options) {\r\n        options = merge({\r\n            headers: {},\r\n            params: {},\r\n\r\n            // Body\r\n            body: null,\r\n            bodyType: 'json',\r\n\r\n            // Authentication\r\n            authenticated: false,\r\n            session: null,\r\n\r\n            // Application\r\n            application: null,\r\n            includeAppParameters: false\r\n        }, options || {});\r\n\r\n        if(!isDefined(options.application)) {\r\n            options.application = this._client.application;\r\n        }\r\n\r\n        // Set request headers\r\n        options.headers['trakt-api-key'] = this._client.key;\r\n        options.headers['trakt-api-version'] = 2;\r\n\r\n        // Authentication\r\n        if(options.authenticated) {\r\n            if(!isDefined(options.session)) {\r\n                // Retrieve current client session\r\n                return this._client.getSession().then((session) => {\r\n                    if(!isDefined(session)) {\r\n                        // Invalid session returned\r\n                        return Promise.reject(new Error(\r\n                            'Authentication required, but an invalid session was returned'\r\n                        ));\r\n                    }\r\n\r\n                    // Fire request with `session`\r\n                    return this.request(method, path, {\r\n                        ...options,\r\n                        session: session\r\n                    });\r\n                }, (error) => {\r\n                    // No session available\r\n                    return Promise.reject(new Error(\r\n                        'Authentication required, but no session is available (error: ' + error.message + ')'\r\n                    ));\r\n                });\r\n            }\r\n\r\n            // Validate session\r\n            if(!isDefined(options.session.access_token)) {\r\n                return Promise.reject(new Error(\r\n                    'Invalid session provided, expected an object with the \"access_token\" property'\r\n                ));\r\n            }\r\n\r\n            // Set authorization header\r\n            options.headers['Authorization'] = 'Bearer ' + options.session.access_token;\r\n        }\r\n\r\n        // Application metadata\r\n        if(!isDefined(options.application)) {\r\n            options.application = {\r\n                name: 'trakt.js',\r\n                version: this._client.build.version,\r\n                date: this._client.build.date\r\n            };\r\n        }\r\n\r\n        // Application parameters\r\n        if(options.includeAppParameters === true) {\r\n            // Validate request method\r\n            if(method !== 'POST') {\r\n                return Promise.reject(new Error(\r\n                    '\"includeAppParameters\" can only be used with POST requests'\r\n                ));\r\n            }\r\n\r\n            // Version\r\n            if(isDefined(options.application.version)) {\r\n                options.body['app_version'] = options.application.version;\r\n            }\r\n\r\n            // Date\r\n            if(isDefined(options.application.date)) {\r\n                options.body['app_date'] = options.application.date;\r\n            }\r\n        }\r\n\r\n        // User Agent\r\n        options.headers['User-Agent'] = this._buildUserAgent(options.application);\r\n\r\n        // Process body\r\n        if(isDefined(options.body)) {\r\n            // Encode body as `bodyType`\r\n            if(options.bodyType === 'json') {\r\n                options.body = JSON.stringify(options.body);\r\n                options.headers['Content-Type'] = 'application/json';\r\n            } else {\r\n                throw new Error('Invalid \"bodyType\" provided: \"' + options.bodyType + '\"');\r\n            }\r\n        }\r\n\r\n        if(this._client.debug) {\r\n            console.debug('[trakt.js] %s %o (options: %O)', method, path, options);\r\n        }\r\n\r\n        // Send request\r\n        return fetch(this._baseUrl + path + '?' + this.encodeParameters(options.params), {\r\n            method: method,\r\n            headers: options.headers,\r\n            body: options.body\r\n        }).then(function(response) {\r\n            // TODO check status code\r\n            return response.json();\r\n        });\r\n    }\r\n\r\n    encodeParameters(parameters) {\r\n        // Remove undefined parameters\r\n        Object.keys(parameters).forEach((key) => {\r\n            if(typeof parameters[key] === 'undefined') {\r\n                delete parameters[key];\r\n            }\r\n        });\r\n\r\n        // Encode parameters to string\r\n        return querystring.encode(parameters);\r\n    }\r\n\r\n    _buildUserAgent(application) {\r\n        let result = '';\r\n\r\n        // Add application name (or \"Unknown\")\r\n        if(isDefined(application.name)) {\r\n            result += application.name;\r\n        } else {\r\n            result += 'Unknown';\r\n        }\r\n\r\n        // Add fragments (version, date)\r\n        let fragments = [\r\n            application.version,\r\n            application.date\r\n        ].filter((fragment) => {\r\n            return isDefined(fragment);\r\n        });\r\n\r\n        if(fragments.length < 1) {\r\n            return result;\r\n        }\r\n\r\n        return result + ' (' + fragments.join('; ') + ')';\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}