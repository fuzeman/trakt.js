{"version":3,"sources":["interfaces/oauth.js"],"names":["OAuthInterface","redirectUri","state","_client","key","Error","siteUrl","http","encodeParameters","code","options","secret","post","body","then","session","refreshToken"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;IAEqBA,c;;;;;;;;;;;qCACJC,W,EAAaC,K,EAAO;AAC7B,gBAAG,CAAC,wBAAU,KAAKC,OAAL,CAAaC,GAAvB,CAAJ,EAAiC;AAC7B,sBAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACH;;AAED,mBAAO,KAAKF,OAAL,CAAaG,OAAb,GAAuB,kBAAvB,GAA4C,KAAKC,IAAL,CAAUC,gBAAV,CAA2B;AAC1E,6BAAa,KAAKL,OAAL,CAAaC,GADgD;;AAG1E,iCAAiB,MAHyD;AAI1E,gCAAgB,wBAAUH,WAAV,IAAyBA,WAAzB,GAAuC,2BAJmB;AAK1E,yBAASC;AALiE,aAA3B,CAAnD;AAOH;;;iCAEQO,I,EAAMR,W,EAAaS,O,EAAS;AACjC,gBAAG,CAAC,wBAAU,KAAKP,OAAL,CAAaC,GAAvB,CAAJ,EAAiC;AAC7B,sBAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACH;;AAED,gBAAG,CAAC,wBAAU,KAAKF,OAAL,CAAaQ,MAAvB,CAAJ,EAAoC;AAChC,sBAAM,IAAIN,KAAJ,CAAU,4CAAV,CAAN;AACH;;AAED,gBAAG,CAAC,wBAAUI,IAAV,CAAJ,EAAqB;AACjB,sBAAM,IAAIJ,KAAJ,CAAU,iDAAV,CAAN;AACH;;AAED,gBAAG,CAAC,wBAAUJ,WAAV,CAAJ,EAA4B;AACxBA,8BAAc,2BAAd;AACH;;AAED,mBAAO,KAAKM,IAAL,CAAUK,IAAV,CAAe,aAAf,eACAF,OADA;AAEHG,sBAAM;AACF,iCAAa,KAAKV,OAAL,CAAaC,GADxB;AAEF,qCAAiB,KAAKD,OAAL,CAAaQ,MAF5B;;AAIF,4BAAQF,IAJN;AAKF,oCAAgBR,WALd;AAMF,kCAAc;AANZ;AAFH,gBAUJa,IAVI,CAUC,UAACC,OAAD,EAAa;AACjB,oBAAG,CAAC,wBAAUA,OAAV,CAAJ,EAAwB;AACpB,2BAAOA,OAAP;AACH;;AAEDA,wBAAQ,cAAR,IAA0Bd,WAA1B;AACA,uBAAOc,OAAP;AACH,aAjBM,CAAP;AAkBH;;;gCAEOC,Y,EAAcf,W,EAAaS,O,EAAS;AACxC,gBAAG,CAAC,wBAAU,KAAKP,OAAL,CAAaC,GAAvB,CAAJ,EAAiC;AAC7B,sBAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACH;;AAED,gBAAG,CAAC,wBAAU,KAAKF,OAAL,CAAaQ,MAAvB,CAAJ,EAAoC;AAChC,sBAAM,IAAIN,KAAJ,CAAU,4CAAV,CAAN;AACH;;AAED,gBAAG,CAAC,wBAAUW,YAAV,CAAJ,EAA6B;AACzB,sBAAM,IAAIX,KAAJ,CAAU,iDAAV,CAAN;AACH;;AAED,mBAAO,KAAKE,IAAL,CAAUK,IAAV,CAAe,aAAf,eACAF,OADA;AAEHG,sBAAM;AACF,iCAAa,KAAKV,OAAL,CAAaC,GADxB;AAEF,qCAAiB,KAAKD,OAAL,CAAaQ,MAF5B;;AAIF,qCAAiBK,YAJf;AAKF,oCAAgB,wBAAUf,WAAV,IAAyBA,WAAzB,GAAuC,2BALrD;AAMF,kCAAc;AANZ;AAFH,eAAP;AAWH;;;;;;kBA5EgBD,c","file":"interfaces/oauth.js","sourcesContent":["import {isDefined} from '../core/helpers';\r\nimport Interface from './base';\r\n\r\nexport default class OAuthInterface extends Interface {\r\n    authorizeUrl(redirectUri, state) {\r\n        if(!isDefined(this._client.key)) {\r\n            throw new Error('Missing required client \"key\" parameter');\r\n        }\r\n\r\n        return this._client.siteUrl + 'oauth/authorize?' + this.http.encodeParameters({\r\n            'client_id': this._client.key,\r\n\r\n            'response_type': 'code',\r\n            'redirect_uri': isDefined(redirectUri) ? redirectUri : 'urn:ietf:wg:oauth:2.0:oob',\r\n            'state': state\r\n        });\r\n    }\r\n\r\n    exchange(code, redirectUri, options) {\r\n        if(!isDefined(this._client.key)) {\r\n            throw new Error('Missing required client \"key\" parameter');\r\n        }\r\n\r\n        if(!isDefined(this._client.secret)) {\r\n            throw new Error('Missing required client \"secret\" parameter');\r\n        }\r\n\r\n        if(!isDefined(code)) {\r\n            throw new Error('Invalid value provided for the \"code\" parameter');\r\n        }\r\n\r\n        if(!isDefined(redirectUri)) {\r\n            redirectUri = 'urn:ietf:wg:oauth:2.0:oob';\r\n        }\r\n\r\n        return this.http.post('oauth/token', {\r\n            ...options,\r\n            body: {\r\n                'client_id': this._client.key,\r\n                'client_secret': this._client.secret,\r\n\r\n                'code': code,\r\n                'redirect_uri': redirectUri,\r\n                'grant_type': 'authorization_code'\r\n            }\r\n        }).then((session) => {\r\n            if(!isDefined(session)) {\r\n                return session;\r\n            }\r\n\r\n            session['redirect_uri'] = redirectUri;\r\n            return session;\r\n        });\r\n    }\r\n\r\n    refresh(refreshToken, redirectUri, options) {\r\n        if(!isDefined(this._client.key)) {\r\n            throw new Error('Missing required client \"key\" parameter');\r\n        }\r\n\r\n        if(!isDefined(this._client.secret)) {\r\n            throw new Error('Missing required client \"secret\" parameter');\r\n        }\r\n\r\n        if(!isDefined(refreshToken)) {\r\n            throw new Error('Invalid value provided for the \"code\" parameter');\r\n        }\r\n\r\n        return this.http.post('oauth/token', {\r\n            ...options,\r\n            body: {\r\n                'client_id': this._client.key,\r\n                'client_secret': this._client.secret,\r\n\r\n                'refresh_token': refreshToken,\r\n                'redirect_uri': isDefined(redirectUri) ? redirectUri : 'urn:ietf:wg:oauth:2.0:oob',\r\n                'grant_type': 'refresh_token'\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}